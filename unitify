#!/usr/bin/python3
import os,sys,subprocess
def get_user_path():
    """
    Get the path of the current user's home directory.

    Returns:
    str: The path of the user's home directory.
    """
    return os.path.expanduser("~")

APPLICATION_PATH=get_user_path()+"/Downloads/ship/linux build/build.x86_64"

def file_exists(file_path):
    """
    Check if a file exists at the given file path.

    Parameters:
    file_path (str): The path to the file to check.

    Returns:
    bool: True if the file exists, False otherwise.
    """
    return os.path.isfile(file_path)

def create_service_dir():
    """
    Create a directory if it does not already exist.

    directory_path (str): The path of the directory to create.
    """
    directory_path = os.path.expanduser("~/.config/systemd/user")
    if not os.path.exists(directory_path):
        print("Folder didn't exist for user services, creating it!")
        os.makedirs(directory_path)
    else:
        print("Folder did exist!")

def start_unity():
    subprocess.run(["unitify-exec"], shell=True, executable='/bin/bash')

if len(sys.argv) == 1:
    start_unity()
    #sys.exit(1)
elif len(sys.argv) != 2:
    print("Usage: unitify <arg>")
    sys.exit(1)
elif sys.argv[1].lower() == "setup":
    print("Setting up the thing")
    create_service_dir()
    subprocess.run(["sudo cp unitify-exec /bin/"], shell=True, executable="/bin/bash")
    if os.path.exists(os.path.expanduser("~/.config/systemd/user/unity-start.service")) and os.path.exists(os.path.expanduser("~/.config/systemd/user/unity-keepup.service")):
        print("SystemD Services already present. overwriting them")
        subprocess.run(["cp -f ./services/* ~/.config/systemd/user/"], shell=True, executable="/bin/bash")
    else:
        print("files not present")
        subprocess.run(["cp -f ./services/* ~/.config/systemd/user/"], shell=True, executable="/bin/bash")
        subprocess.run(["systemctl --user enable unity-start"], shell=True, executable="/bin/bash")
        subprocess.run(["systemctl --user enable unity-keepup"], shell=True, executable="/bin/bash")
elif sys.argv[1].lower() == "uninstall":
    subprocess.run(["systemctl --user stop unity-start"], shell=True, executable="/bin/bash")
    subprocess.run(["systemctl --user disable unity-start"], shell=True, executable="/bin/bash")
    subprocess.run(["systemctl --user stop unity-keepup"], shell=True, executable="/bin/bash")
    subprocess.run(["systemctl --user disable unity-keepup"], shell=True, executable="/bin/bash")

    print("Stopped SystemD services")
    subprocess.run(["rm ~/.config/systemd/user/unity-start.service ~/.config/systemd/user/unity-keepup.service"], shell=True, executable="/bin/bash")
    print("Removed the services related files")
    print("Uninstalling ")
else:
    print("Invalid Argument Provided")


# Extract the single argument
#argument = sys.argv[1]

# Use the argument
#print("Argument provided:", argument)

#print(file_exists(APPLICATION_PATH))
#create_service_dir()


