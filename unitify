#!/usr/bin/python3
import os
import subprocess
import argparse

def get_user_path():
    """
    Get the path of the current user's home directory.

    Returns:
    str: The path of the user's home directory.
    """
    return os.path.expanduser("~")



def file_exists(file_path):
    """
    Check if a file exists at the given file path.

    Parameters:
    file_path (str): The path to the file to check.

    Returns:
    bool: True if the file exists, False otherwise.
    """
    return os.path.isfile(file_path)

def create_service_dir():
    """
    Create a directory if it does not already exist.
    """
    directory_path = os.path.expanduser("~/.config/systemd/user")
    if not os.path.exists(directory_path):
        print("Folder didn't exist for user services, creating it!")
        os.makedirs(directory_path)
    else:
        print("Folder did exist!")

def create_unity_start_service():
        # Define the file content
    service_content = f"""[Unit]
Description=Service To Start Unity App.
After=graphical-session.target
After=gnome-session.service
After=gnome-session-daemon.service
After=gnome.target
Wants=graphical-session.target
Wants=gnome-session.target

[Service]
Type=simple
ExecStart=unitify-exec
Environment={check_auto_login_display()}
Environment=XDG_RUNTIME_DIR=/run/user/%U
Environment=XAUTHORITY=/run/user/1000/gdm/Xauthority
#Restart=on-failure

[Install]
WantedBy=default.target
"""

    target_file_path = os.path.expanduser('~/.config/systemd/user/unity-start.service')
    os.makedirs(os.path.dirname(target_file_path), exist_ok=True)
    with open(target_file_path, 'w') as service_file:
            service_file.write(service_content)
        
    print(f'Service file created at: {target_file_path}')

def check_auto_login_display():
    config_file_paths = ['/etc/gdm3/custom.conf', '/etc/gdm/custom.conf']
    auto_login_enabled = False

    for config_file_path in config_file_paths:
        if os.path.exists(config_file_path):
            try:
                with open(config_file_path, 'r') as file:
                    lines = file.readlines()
                
                for line in lines:
                    if 'AutomaticLoginEnable=' in line:
                        # Remove any leading or trailing whitespace
                        stripped_line = line.strip()
                        # Check if the line is not commented out
                        if not stripped_line.startswith('#'):
                            # Check the value of AutomaticLoginEnable
                            if 'true' in stripped_line.split('=')[1].lower():
                                auto_login_enabled = True
                                break
                        else:
                            # If commented, we assume it's false by default
                            auto_login_enabled = False

                if auto_login_enabled:
                    return "DISPLAY=:0"
                else:
                    return "DISPLAY=:1"
            
            except Exception as e:
                print(f"An error occurred while reading {config_file_path}: {e}")
                return None
    
    # If no valid file is found or read
    print("Error: Neither /etc/gdm3/custom.conf nor /etc/gdm/custom.conf could be found or read.")
    return None

def create_unity_keepup_service():
    service_content = f"""[Unit]
Description=Unity KeepUp Script LOW
After=network.target

[Service]
ExecStart=unitify-exec
Restart=always
RestartSec=5
Environment={check_auto_login_display()}
Environment=XDG_RUNTIME_DIR=/run/user/%U
Environment=XAUTHORITY=/run/user/1000/gdm/Xauthority

[Install]
WantedBy=default.target
"""

    target_file_path = os.path.expanduser('~/.config/systemd/user/unity-keepup.service')
    os.makedirs(os.path.dirname(target_file_path), exist_ok=True)
    with open(target_file_path, 'w') as service_file:
            service_file.write(service_content)
        
    print(f'Service file created at: {target_file_path}')

def replace_application_path(new_path):
    # Define the file name
    file_name = "unitify-exec"
    
    if not os.path.isfile(file_name):
        print(f"File '{file_name}' not found in the current working directory.")
        return
    
    with open(file_name, 'r') as file:
        content = file.read()
    
    new_content = content.replace("APPLICATION_PATH", new_path)
    with open(file_name, 'w') as file:
        file.write(new_content)
    
    print(f"Replaced 'APPLICATION_PATH' with '{new_path}' in '{file_name}'.")

def start_unity():
    subprocess.run(["unitify-exec"], shell=True, executable='/bin/bash')

import os
import subprocess

def create_unitify_exec(app_full_path):
        # Define the script template with the APP_PROC placeholder
    var1 = f"""#!/bin/bash
export {check_auto_login_display()}
"""
    var2 = """
export XAUTHORITY=/run/user/1000/gdm/Xauthority
export XDG_RUNTIME_DIR=/run/user/$UID
xauth add "$DISPLAY" MIT-MAGIC-COOKIE-1 $(XAUTHORITY=/run/user/1000/gdm/Xauthority xauth list | awk '{print $3}' | uniq)

if ! pgrep -x "APP_PROC" > /dev/null; then
    echo "Unity process not found. Restarting unity..."
    sleep 10
    "APP_PROC"
else
    echo "Unity process is running."
fi  
"""
    script_template = var1 + var2
    script_content = script_template.replace("APP_PROC", app_full_path)
    target_file_path = '/bin/unitify-exec'
    with open('/tmp/unitify-exec', 'w') as temp_file:
            temp_file.write(script_content)
        
    subprocess.run(['sudo', 'mv', '/tmp/unitify-exec', target_file_path], check=True)
    subprocess.run(['sudo', 'chmod', '+x', target_file_path], check=True)
    print(f'Script created and made executable at: {target_file_path}')


def setup(application_path):
    
    print("Setting up the thing")

    create_service_dir()
    replace_application_path(application_path)

    create_unitify_exec(application_path)

    #subprocess.run(["sudo cp unitify-exec /bin/"], shell=True, executable="/bin/bash")


    if os.path.exists(os.path.expanduser("~/.config/systemd/user/unity-start.service")) and os.path.exists(os.path.expanduser("~/.config/systemd/user/unity-keepup.service")):

        print("SystemD Services already present. overwriting them")
        #subprocess.run(["cp -f ./services/* ~/.config/systemd/user/"], shell=True, executable="/bin/bash")

        create_unity_start_service()
        create_unity_keepup_service()

    else:
        print("files not present")
        #subprocess.run(["cp -f ./services/* ~/.config/systemd/user/"], shell=True, executable="/bin/bash")
        
        create_unity_start_service()
        create_unity_keepup_service()
        
        subprocess.run(["systemctl --user enable unity-start"], shell=True, executable="/bin/bash")
        #subprocess.run(["systemctl --user start unity-start"], shell=True, executable="/bin/bash")

def keepup():
    subprocess.run(["systemctl --user enable unity-keepup"], shell=True, executable="/bin/bash")
    subprocess.run(["systemctl --user start unity-keepup"], shell=True, executable="/bin/bash")

def keepdown():
    subprocess.run(["systemctl --user stop unity-keepup"], shell=True, executable="/bin/bash")
    subprocess.run(["systemctl --user disable unity-keepup"], shell=True, executable="/bin/bash")

def uninstall():
    subprocess.run(["systemctl --user stop unity-start"], shell=True, executable="/bin/bash")
    subprocess.run(["systemctl --user disable unity-start"], shell=True, executable="/bin/bash")
    subprocess.run(["systemctl --user stop unity-keepup"], shell=True, executable="/bin/bash")
    subprocess.run(["systemctl --user disable unity-keepup"], shell=True, executable="/bin/bash")
    print("Stopped SystemD services")
    subprocess.run(["rm ~/.config/systemd/user/unity-start.service ~/.config/systemd/user/unity-keepup.service"], shell=True, executable="/bin/bash")
    print("Removed the services related files")
    print("Uninstalling")

def main():
    parser = argparse.ArgumentParser(description="Unity management script.")
    subparsers = parser.add_subparsers(dest='command', help='Commands')

    # Parser for the 'setup' command
    setup_parser = subparsers.add_parser('setup', help='Setup the unity environment')
    setup_parser.add_argument('--path', required=True, help='Path to the application')

    # Parser for the 'uninstall' command
    uninstall_parser = subparsers.add_parser('uninstall', help='Uninstall the unity environment')
    keepup_parser = subparsers.add_parser('keepup', help='KeepUp the application and check after 5 secs')
    keepdown_parser = subparsers.add_parser('keepdown', help='Disable the keepup functionality')
    args = parser.parse_args()
    if args.command is None:
        #start_unity()
        parser.print_help()
    elif args.command == 'setup':
        setup(args.path)
    elif args.command == 'uninstall':
        uninstall()
    elif args.command == 'keepdown':
        keepdown()
    elif args.command == 'keepup':
        keepup()
    else:
        parser.print_help()

if __name__ == '__main__':
    main()

