#!/usr/bin/python3
import os
import subprocess
import argparse

def get_user_path():
    """
    Get the path of the current user's home directory.

    Returns:
    str: The path of the user's home directory.
    """
    return os.path.expanduser("~")

def file_exists(file_path):
    """
    Check if a file exists at the given file path.

    Parameters:
    file_path (str): The path to the file to check.

    Returns:
    bool: True if the file exists, False otherwise.
    """
    return os.path.isfile(file_path)

def create_service_dir():
    """
    Create a directory if it does not already exist.
    """
    directory_path = os.path.expanduser("~/.config/systemd/user")
    if not os.path.exists(directory_path):
        print("Folder didn't exist for user services, creating it!")
        os.makedirs(directory_path)
    else:
        print("Folder did exist!")
def replace_application_path(new_path):
    # Define the file name
    file_name = "unitify-exec"
    
    # Check if the file exists in the current working directory
    if not os.path.isfile(file_name):
        print(f"File '{file_name}' not found in the current working directory.")
        return
    
    # Read the content of the file
    with open(file_name, 'r') as file:
        content = file.read()
    
    # Replace the pattern "APPLICATION_PATH" with the new path
    new_content = content.replace("APPLICATION_PATH", new_path)
    
    # Write the new content back to the file
    with open(file_name, 'w') as file:
        file.write(new_content)
    
    print(f"Replaced 'APPLICATION_PATH' with '{new_path}' in '{file_name}'.")

def start_unity():
    subprocess.run(["unitify-exec"], shell=True, executable='/bin/bash')

def setup(application_path):
    print("Setting up the thing")
    create_service_dir()
    replace_application_path(application_path)
    subprocess.run(["sudo cp unitify-exec /bin/"], shell=True, executable="/bin/bash")
    if os.path.exists(os.path.expanduser("~/.config/systemd/user/unity-start.service")) and os.path.exists(os.path.expanduser("~/.config/systemd/user/unity-keepup.service")):
        print("SystemD Services already present. overwriting them")
        subprocess.run(["cp -f ./services/* ~/.config/systemd/user/"], shell=True, executable="/bin/bash")
    else:
        print("files not present")
        subprocess.run(["cp -f ./services/* ~/.config/systemd/user/"], shell=True, executable="/bin/bash")
        subprocess.run(["systemctl --user enable unity-start"], shell=True, executable="/bin/bash")
        subprocess.run(["systemctl --user start unity-start"], shell=True, executable="/bin/bash")
def keepup():
    subprocess.run(["systemctl --user enable unity-keepup"], shell=True, executable="/bin/bash")
    subprocess.run(["systemctl --user start unity-keepup"], shell=True, executable="/bin/bash")

def keepdown():
    subprocess.run(["systemctl --user stop unity-keepup"], shell=True, executable="/bin/bash")
    subprocess.run(["systemctl --user disable unity-keepup"], shell=True, executable="/bin/bash")

def uninstall():
    subprocess.run(["systemctl --user stop unity-start"], shell=True, executable="/bin/bash")
    subprocess.run(["systemctl --user disable unity-start"], shell=True, executable="/bin/bash")

    print("Stopped SystemD services")
    subprocess.run(["rm ~/.config/systemd/user/unity-start.service ~/.config/systemd/user/unity-keepup.service"], shell=True, executable="/bin/bash")
    print("Removed the services related files")
    print("Uninstalling")

def main():
    parser = argparse.ArgumentParser(description="Unity management script.")
    subparsers = parser.add_subparsers(dest='command', help='Commands')

    # Parser for the 'setup' command
    setup_parser = subparsers.add_parser('setup', help='Setup the unity environment')
    setup_parser.add_argument('--path', required=True, help='Path to the application')

    # Parser for the 'uninstall' command
    uninstall_parser = subparsers.add_parser('uninstall', help='Uninstall the unity environment')
    keepup_parser = subparsers.add_parser('keepup', help='KeepUp the application and check after 5 secs')
    keepdown_parser = subparsers.add_parser('keepdown', help='Disable the keepup functionality')
    args = parser.parse_args()
    if args.command is None:
        #start_unity()
        parser.print_help()
    elif args.command == 'setup':
        setup(args.path)
    elif args.command == 'uninstall':
        uninstall()
    elif args.command == 'keepdown':
        keepdown()
    elif args.command == 'keepup':
        keepup()
    else:
        parser.print_help()

if __name__ == '__main__':
    main()

